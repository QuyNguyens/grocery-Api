// queue/consumers/user.consumer.ts
import { Channel } from "amqplib";
import logger from "../../utils/logger";
import { env } from "process";

/**
 * Kh·ªüi t·∫°o consumer cho h√†ng ƒë·ª£i ng∆∞·ªùi d√πng
 */
export async function userConsumer(channel: Channel): Promise<void> {
  const queue = env.USER_QUEUE;

  await channel.assertQueue(queue, { durable: true });

  channel.consume(queue, async (msg) => {
    if (msg !== null) {
      try {
        const content = msg.content.toString();
        const data = JSON.parse(content);

        logger.info(`üì• [UserConsumer] Received message: ${content}`);

        // TODO: Th·ª±c hi·ªán x·ª≠ l√Ω d·ªØ li·ªáu t·∫°i ƒë√¢y
        // V√≠ d·ª•: await handleUserMessage(data);

        // Sau khi x·ª≠ l√Ω xong, x√°c nh·∫≠n
        channel.ack(msg);
      } catch (err) {
        logger.error(`‚ùå [UserConsumer] Error: ${(err as Error).message}`);
        // C√≥ th·ªÉ ch·ªçn: kh√¥ng ack ƒë·ªÉ message ƒë∆∞·ª£c x·ª≠ l·∫°i
        channel.nack(msg, false, false); // B·ªè qua message l·ªói
      }
    }
  });

  logger.info(`‚úÖ [UserConsumer] Listening on queue: ${queue}`);
}
